/*
 This file is part of libRAMSES++ 
 a C++ library to access snapshot files 
 generated by the simulation code RAMSES by R. Teyssier
 
 Copyright (C) 2008-11  Oliver Hahn, ojha@gmx.de
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

 
 Modified to use vtkMultiProcessController instead of standard MPI controller
 */

#ifndef RAMSES_MPI_HH
#define RAMSES_MPI_HH

#include "vtkMultiProcessController.h"
#include <vector>

namespace RAMSES{

inline void mpi_distribute_domains(int ndomains, std::vector<int>& mycpus, bool silent=false )
{
  int rank=0;
  int size=1;
	//... determine meta-domain-decomposition ...//
  if(vtkMultiProcessController::GetGlobalController()!=NULL)
  {
    rank = vtkMultiProcessController::GetGlobalController()->GetLocalProcessId();
    size= vtkMultiProcessController::GetGlobalController()->GetNumberOfProcesses();
  }

	int npp = (int)((float)ndomains/size);
	
	if(rank == size-1 )
		npp = ndomains-(rank*npp);
	
	if(!silent)
		std::cout << "* Task " << rank << ": working on domains "
		<< 1+npp*rank << " - " << npp*(rank+1) << std::endl;
	
	for( int i=1+npp*rank; i<=npp*(rank+1); ++i )
		mycpus.push_back(i);
  if(vtkMultiProcessController::GetGlobalController()!=NULL) 
  {
    vtkMultiProcessController::GetGlobalController()->Barrier();
  }
}

} // namespace RAMSES
#endif
